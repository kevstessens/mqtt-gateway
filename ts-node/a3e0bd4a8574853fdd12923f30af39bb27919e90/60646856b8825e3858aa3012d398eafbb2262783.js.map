{"version":3,"file":"/root/code/mqtt-gateway/app/authentication/authenticate.ts","sources":["/root/code/mqtt-gateway/app/authentication/authenticate.ts"],"names":[],"mappings":";AAAA,4BAA4B;AAC5B,yDAAuD;AACvD,oCAAgC;AAChC,qDAAmD;AACnD,qDAAmD;AAEnD,yDAAyD;AACzD,sBAA6B,MAAM,EAAE,QAAgB,EAAE,QAAgB,EAAE,QAAQ;IAC7E,YAAG,CAAC,YAAY,CAAC,CAAC;IAClB,IAAI,EAAE,GAAG,gCAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACpD,IAAI,EAAE,GAAG,gCAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACpD,0BAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAClD,CAAC;AALD,oCAKC","sourcesContent":["// test@test.com password123\nimport { verifyToken } from \"../security/verify_token\";\nimport { log } from \"../logger\";\nimport { authenticateOk } from \"./authenticate_ok\";\nimport { authenticateNo } from \"./authenticate_no\";\n\n/** Determine if user is authorized to use the server. */\nexport function authenticate(client, username: string, password: string, callback) {\n    log(\"AUTH START\");\n    let ok = authenticateOk(client, callback, username);\n    let no = authenticateNo(client, callback, username);\n    verifyToken(password.toString()).then(ok, no);\n}\n"]}